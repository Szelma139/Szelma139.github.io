---
title: Delegates in C#
layout: post
date: '2020-01-26 10:55:00 +0100'
categories: C# Delegates Threads
---

Wpis o delegatach w C# jako że dla mnie to nowość. Same delegaty przydają sie głównie przy Callbackach, w przeciwnym wypadku to tylko wskaźnik na funkcje jak w C++. No to jedziemy:

Because delegates are quite a new thing for me, and also C# let's try how it works. Delegate are mostly used with callbacks, in reality it is same stuff as function pointers in c++. So let's ride:

Third parameter is a callback.

```
  client.DownloadFile(file.FullName, fileStream, DownloadProgresBar);

```

And that's how it looks like:

```
  public void DownloadFile(string path, Stream output, Action<ulong> downloadCallback = null);
```


And that's this passed callback. **DownloadProegressBar**
```
 private void DownloadProgresBar(ulong uploaded)
        {
            // Update progress bar on foreground thread
            progressBar1.Invoke((MethodInvoker)delegate { progressBar1.Value = (int)uploaded; });
        }
```

Every element of interface (GUI) is executed in main thread but downloading files is executed in different thread so user interface is not blocked, especially when some heavy stuff is being processed by the processor. Sadly computer can do only one thing at a time -  that's not entirely true.

ProgressBar has Invoke method, which let's use define delegate by Method Invoker. **Method Invoker** is using void method without parameters (**delegate**) and that's where anonymous function is defined - it doesn't need value.

```
                   progressBar1.Invoke(
               (MethodInvoker)delegate {
                   progressBar1.Maximum = (int)file.Attributes.Size; });
  ```
  
See y'all.

